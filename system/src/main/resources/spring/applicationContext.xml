<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-4.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-autowire="byName">
	
	<context:component-scan base-package="com.hexin.*,com.vteba.*" annotation-config="true" />
	<!-- 配置文件bean -->
	<bean class="com.hexin.core.util.properties.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<value>classpath:log4j.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源bean -->
		
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
        <!-- 基本属性 url、user、password -->  
        <property name="url" value="${pg.url}" />  
        <property name="username" value="${pg.username}" />  
        <property name="password" value="${pg.password}" />  
        <!-- 配置初始化大小、最小、最大 -->  
        <property name="initialSize" value="${pg.initialSize}" />  
        <property name="minIdle" value="${pg.minIdle}" />   
        <property name="maxActive" value="${pg.maxActive}" />  
        <!-- 配置获取连接等待超时的时间 -->  
        <property name="maxWait" value="60000" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" /> 
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
        <property name="filters" value="stat" />   
    </bean> 

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:spring/configurationPostgre.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<bean id="readDaoHelper" class="com.hexin.core.base.DaoHelper">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>
	<bean id="writeDaoHelper" class="com.hexin.core.base.DaoHelper">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>
	
	<!-- 事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- redis配置 -->
	<bean id="shardedRedisUtil" class="com.hexin.core.util.cache.ShardedRedisUtil">
		<property name="ip" value="${redis.ip}" />
	</bean>
	<!-- aop -->
	<bean id="aspectJRedisRead" class="com.hexin.core.spring.aop.AspectJRedisRead">
		<property name="redisUtil" ref="shardedRedisUtil"></property>
	</bean>
	<bean id="aspectJRedisWrite" class="com.hexin.core.spring.aop.AspectJRedisWrite">
		<property name="redisUtil" ref="shardedRedisUtil"></property>
	</bean>
	<bean id="accessLogAspect" class="com.hexin.pettyLoan.common.aop.AccessLogAspect">
	</bean>
	<bean id="aspectJSimpleWorkflowApprove" class="com.hexin.pettyLoan.common.aop.AspectJSimpleWorkflowApprove">
		<property name="simpleWorkflowService" ref="simpleWorkflowService"></property>
	</bean>
	<aop:config>
	    <aop:aspect id="accessLogAspectAop" ref="accessLogAspect">
	      <aop:pointcut id="target" expression="@annotation(com.hexin.core.annotation.AccessLog)"/>
	      <aop:after-returning method="doLog" pointcut-ref="target" arg-names="result" returning="result" />
	      <aop:after-throwing method="throwing" pointcut-ref="target" throwing="e"/>
	    </aop:aspect>
    </aop:config>
    <aop:config>
	    <aop:aspect id="aspectJRedisReadAop" ref="aspectJRedisRead">
	      <aop:pointcut id="target" expression="@annotation(com.hexin.core.annotation.RedisRead)"/>
	      <aop:around method="readAround" pointcut-ref="target" />
	      <aop:after-throwing method="readAfterThrowing" pointcut-ref="target" throwing="e"/>
	    </aop:aspect>
    </aop:config>
    <aop:config>
	    <aop:aspect id="aspectJRedisWriteAop" ref="aspectJRedisWrite">
	      <aop:pointcut id="target" expression="@annotation(com.hexin.core.annotation.RedisWrite)"/>
	      <aop:around method="readAround" pointcut-ref="target" />
	      <aop:after-throwing method="readAfterThrowing" pointcut-ref="target" throwing="e"/>
	    </aop:aspect>
    </aop:config>
    <aop:config>
	    <aop:aspect id="aspectJSimpleWorkflowApproveAop" ref="aspectJSimpleWorkflowApprove">
	      <aop:pointcut id="target" expression="@annotation(com.hexin.pettyLoan.common.aop.NeedApprove)"/>
	      <aop:around method="approveAround" pointcut-ref="target" />
	      <aop:after-throwing method="readAfterThrowing" pointcut-ref="target" throwing="e"/>
	    </aop:aspect>
    </aop:config>
</beans>
